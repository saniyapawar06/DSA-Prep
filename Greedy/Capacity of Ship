class Solution {
    public static int leastWeightCapacity(int[] arr, int n, int d) {
        int low = 0, high = 0;

        // Determine the search space: low = max weight, high = sum of all weights
        for (int weight : arr) {
            low = Math.max(low, weight);
            high += weight;
        }

        // Binary search to find the minimum feasible capacity
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (canShip(arr, n, d, mid)) {
                high = mid; // Try to minimize the capacity
            } else {
                low = mid + 1; // Increase the capacity
            }
        }

        return low;
    }

    // Greedy check to see if a given capacity can ship all weights within d days
    private static boolean canShip(int[] arr, int n, int d, int capacity) {
        int currentLoad = 0;
        int requiredDays = 1;

        for (int i = 0; i < n; i++) {
            if (currentLoad + arr[i] > capacity) {
                requiredDays++;
                currentLoad = 0;
            }
            currentLoad += arr[i];

            if (requiredDays > d) {
                return false; // Not possible within given days
            }
        }

        return true;
    }
}
