class Solution {
    public int rob(int[] nums) {
        int n = nums.length;

        // Handle base cases
        if (n == 0) {
            return 0; // No houses to rob
        }
        if (n == 1) {
            return nums[0]; // Only one house to rob
        }

        // Initialize the dp array
        int[] dp = new int[n];
        dp[0] = nums[0]; // Maximum money from the first house
        dp[1] = Math.max(nums[0], nums[1]); // Maximum money from the first two houses

        // Fill the dp array using the recurrence relation
        for (int i = 2; i < n; i++) {
            int take = nums[i] + dp[i - 2]; // Robbing the current house and adding the maximum from two houses back
            int notTake = dp[i - 1]; // Not robbing the current house, taking the maximum from the previous house
            dp[i] = Math.max(take, notTake); // Choosing the maximum of the two options
        }

        // The last element in dp contains the maximum money that can be robbed
        return dp[n - 1];
    }
}
